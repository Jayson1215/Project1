/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_components_AcademicYears_js"],{

/***/ "./resources/js/components/AcademicYears.js":
/*!**************************************************!*\
  !*** ./resources/js/components/AcademicYears.js ***!
  \**************************************************/
/***/ (() => {

eval("{function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar AcademicYearsManager = /*#__PURE__*/function () {\n  function AcademicYearsManager() {\n    _classCallCheck(this, AcademicYearsManager);\n    this.academicYears = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.searchTerm = \"\";\n    this.filterStatus = \"all\";\n    this.editingId = null;\n    this.init();\n  }\n  return _createClass(AcademicYearsManager, [{\n    key: \"init\",\n    value: function init() {\n      this.loadAcademicYears();\n      this.attachEventListeners();\n      this.renderAcademicYears();\n    }\n  }, {\n    key: \"loadAcademicYears\",\n    value: function loadAcademicYears() {\n      var stored = localStorage.getItem(\"academicYears\");\n      this.academicYears = stored ? JSON.parse(stored) : [{\n        id: 1,\n        yearName: \"2024-2025\",\n        startDate: \"2024-09-01\",\n        endDate: \"2025-06-30\",\n        semesters: 2,\n        currentSemester: \"Fall 2024\",\n        totalStudents: 1250,\n        status: \"active\"\n      }, {\n        id: 2,\n        yearName: \"2023-2024\",\n        startDate: \"2023-09-01\",\n        endDate: \"2024-06-30\",\n        semesters: 2,\n        currentSemester: \"Completed\",\n        totalStudents: 1180,\n        status: \"completed\"\n      }, {\n        id: 3,\n        yearName: \"2025-2026\",\n        startDate: \"2025-09-01\",\n        endDate: \"2026-06-30\",\n        semesters: 2,\n        currentSemester: \"Not Started\",\n        totalStudents: 0,\n        status: \"upcoming\"\n      }];\n    }\n  }, {\n    key: \"saveAcademicYears\",\n    value: function saveAcademicYears() {\n      localStorage.setItem(\"academicYears\", JSON.stringify(this.academicYears));\n    }\n  }, {\n    key: \"attachEventListeners\",\n    value: function attachEventListeners() {\n      var _this = this;\n      var searchInput = document.getElementById(\"searchAcademicYears\");\n      if (searchInput) {\n        searchInput.addEventListener(\"input\", function (e) {\n          _this.searchTerm = e.target.value.toLowerCase();\n          _this.currentPage = 1;\n          _this.renderAcademicYears();\n        });\n      }\n      var statusFilter = document.getElementById(\"filterStatus\");\n      if (statusFilter) {\n        statusFilter.addEventListener(\"change\", function (e) {\n          _this.filterStatus = e.target.value;\n          _this.currentPage = 1;\n          _this.renderAcademicYears();\n        });\n      }\n      var addBtn = document.getElementById(\"addAcademicYearBtn\");\n      if (addBtn) {\n        addBtn.addEventListener(\"click\", function () {\n          return _this.openModal();\n        });\n      }\n      var closeBtn = document.querySelector(\".modal-close\");\n      if (closeBtn) {\n        closeBtn.addEventListener(\"click\", function () {\n          return _this.closeModal();\n        });\n      }\n      var modalOverlay = document.getElementById(\"academicYearModal\");\n      if (modalOverlay) {\n        modalOverlay.addEventListener(\"click\", function (e) {\n          if (e.target === modalOverlay) {\n            _this.closeModal();\n          }\n        });\n      }\n      var form = document.getElementById(\"academicYearForm\");\n      if (form) {\n        form.addEventListener(\"submit\", function (e) {\n          e.preventDefault();\n          _this.saveAcademicYear();\n        });\n      }\n    }\n  }, {\n    key: \"getFilteredAcademicYears\",\n    value: function getFilteredAcademicYears() {\n      var _this2 = this;\n      return this.academicYears.filter(function (year) {\n        var matchesSearch = year.yearName.toLowerCase().includes(_this2.searchTerm) || year.currentSemester.toLowerCase().includes(_this2.searchTerm);\n        var matchesStatus = _this2.filterStatus === \"all\" || year.status === _this2.filterStatus;\n        return matchesSearch && matchesStatus;\n      });\n    }\n  }, {\n    key: \"renderAcademicYears\",\n    value: function renderAcademicYears() {\n      var _this3 = this;\n      var filtered = this.getFilteredAcademicYears();\n      var totalPages = Math.ceil(filtered.length / this.itemsPerPage);\n      var start = (this.currentPage - 1) * this.itemsPerPage;\n      var end = start + this.itemsPerPage;\n      var paginatedYears = filtered.slice(start, end);\n      var tbody = document.getElementById(\"academicYearsTableBody\");\n      if (!tbody) return;\n      if (paginatedYears.length === 0) {\n        tbody.innerHTML = \"\\n                <tr>\\n                    <td colspan=\\\"7\\\" class=\\\"no-data\\\">No academic years found</td>\\n                </tr>\\n            \";\n      } else {\n        tbody.innerHTML = paginatedYears.map(function (year) {\n          return \"\\n                <tr>\\n                    <td><strong>\".concat(year.yearName, \"</strong></td>\\n                    <td>\").concat(_this3.formatDate(year.startDate), \"</td>\\n                    <td>\").concat(_this3.formatDate(year.endDate), \"</td>\\n                    <td>\").concat(year.semesters, \"</td>\\n                    <td>\").concat(year.currentSemester, \"</td>\\n                    <td>\").concat(year.totalStudents, \"</td>\\n                    <td>\\n                        <span class=\\\"status-badge status-\").concat(year.status, \"\\\">\\n                            \").concat(year.status, \"\\n                        </span>\\n                    </td>\\n                    <td class=\\\"actions\\\">\\n                        <button class=\\\"btn-icon btn-edit\\\" onclick=\\\"academicYearsManager.editAcademicYear(\").concat(year.id, \")\\\" title=\\\"Edit\\\">\\n                            <i class=\\\"fas fa-edit\\\"></i>\\n                        </button>\\n                        <button class=\\\"btn-icon btn-delete\\\" onclick=\\\"academicYearsManager.deleteAcademicYear(\").concat(year.id, \")\\\" title=\\\"Delete\\\">\\n                            <i class=\\\"fas fa-trash\\\"></i>\\n                        </button>\\n                    </td>\\n                </tr>\\n            \");\n        }).join(\"\");\n      }\n      this.renderPagination(totalPages);\n      this.updateStats(filtered.length);\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(dateString) {\n      var date = new Date(dateString);\n      return date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\"\n      });\n    }\n  }, {\n    key: \"renderPagination\",\n    value: function renderPagination(totalPages) {\n      var pagination = document.getElementById(\"pagination\");\n      if (!pagination) return;\n      if (totalPages <= 1) {\n        pagination.innerHTML = \"\";\n        return;\n      }\n      var html = \"\\n            <button class=\\\"pagination-btn\\\" \".concat(this.currentPage === 1 ? \"disabled\" : \"\", \" \\n                onclick=\\\"academicYearsManager.goToPage(\").concat(this.currentPage - 1, \")\\\">\\n                Previous\\n            </button>\\n        \");\n      for (var i = 1; i <= totalPages; i++) {\n        if (i === 1 || i === totalPages || i >= this.currentPage - 1 && i <= this.currentPage + 1) {\n          html += \"\\n                    <button class=\\\"pagination-btn \".concat(i === this.currentPage ? \"active\" : \"\", \"\\\" \\n                        onclick=\\\"academicYearsManager.goToPage(\").concat(i, \")\\\">\\n                        \").concat(i, \"\\n                    </button>\\n                \");\n        } else if (i === this.currentPage - 2 || i === this.currentPage + 2) {\n          html += \"<span class=\\\"pagination-ellipsis\\\">...</span>\";\n        }\n      }\n      html += \"\\n            <button class=\\\"pagination-btn\\\" \".concat(this.currentPage === totalPages ? \"disabled\" : \"\", \" \\n                onclick=\\\"academicYearsManager.goToPage(\").concat(this.currentPage + 1, \")\\\">\\n                Next\\n            </button>\\n        \");\n      pagination.innerHTML = html;\n    }\n  }, {\n    key: \"updateStats\",\n    value: function updateStats(filteredCount) {\n      var totalEl = document.getElementById(\"totalAcademicYears\");\n      var activeEl = document.getElementById(\"activeAcademicYears\");\n      if (totalEl) totalEl.textContent = filteredCount;\n      if (activeEl) {\n        var activeCount = this.academicYears.filter(function (y) {\n          return y.status === \"active\";\n        }).length;\n        activeEl.textContent = activeCount;\n      }\n    }\n  }, {\n    key: \"goToPage\",\n    value: function goToPage(page) {\n      this.currentPage = page;\n      this.renderAcademicYears();\n    }\n  }, {\n    key: \"openModal\",\n    value: function openModal() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.editingId = year ? year.id : null;\n      var modal = document.getElementById(\"academicYearModal\");\n      var form = document.getElementById(\"academicYearForm\");\n      var title = document.getElementById(\"modalTitle\");\n      if (title) {\n        title.textContent = year ? \"Edit Academic Year\" : \"Add New Academic Year\";\n      }\n      if (form) {\n        if (year) {\n          form.elements[\"yearName\"].value = year.yearName;\n          form.elements[\"startDate\"].value = year.startDate;\n          form.elements[\"endDate\"].value = year.endDate;\n          form.elements[\"semesters\"].value = year.semesters;\n          form.elements[\"currentSemester\"].value = year.currentSemester;\n          form.elements[\"totalStudents\"].value = year.totalStudents;\n          form.elements[\"status\"].value = year.status;\n        } else {\n          form.reset();\n          form.elements[\"status\"].value = \"upcoming\";\n          form.elements[\"semesters\"].value = 2;\n          form.elements[\"totalStudents\"].value = 0;\n        }\n      }\n      if (modal) {\n        modal.classList.add(\"active\");\n      }\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      var modal = document.getElementById(\"academicYearModal\");\n      if (modal) {\n        modal.classList.remove(\"active\");\n      }\n      this.editingId = null;\n    }\n  }, {\n    key: \"saveAcademicYear\",\n    value: function saveAcademicYear() {\n      var _this4 = this;\n      var form = document.getElementById(\"academicYearForm\");\n      var formData = new FormData(form);\n      var yearData = {\n        yearName: formData.get(\"yearName\"),\n        startDate: formData.get(\"startDate\"),\n        endDate: formData.get(\"endDate\"),\n        semesters: Number.parseInt(formData.get(\"semesters\")),\n        currentSemester: formData.get(\"currentSemester\"),\n        totalStudents: Number.parseInt(formData.get(\"totalStudents\")),\n        status: formData.get(\"status\")\n      };\n      if (this.editingId) {\n        var index = this.academicYears.findIndex(function (y) {\n          return y.id === _this4.editingId;\n        });\n        if (index !== -1) {\n          this.academicYears[index] = _objectSpread(_objectSpread({}, this.academicYears[index]), yearData);\n        }\n      } else {\n        var newYear = _objectSpread({\n          id: Date.now()\n        }, yearData);\n        this.academicYears.push(newYear);\n      }\n      this.saveAcademicYears();\n      this.renderAcademicYears();\n      this.closeModal();\n      this.showNotification(this.editingId ? \"Academic year updated successfully\" : \"Academic year added successfully\");\n    }\n  }, {\n    key: \"editAcademicYear\",\n    value: function editAcademicYear(id) {\n      var year = this.academicYears.find(function (y) {\n        return y.id === id;\n      });\n      if (year) {\n        this.openModal(year);\n      }\n    }\n  }, {\n    key: \"deleteAcademicYear\",\n    value: function deleteAcademicYear(id) {\n      if (confirm(\"Are you sure you want to delete this academic year?\")) {\n        this.academicYears = this.academicYears.filter(function (y) {\n          return y.id !== id;\n        });\n        this.saveAcademicYears();\n        this.renderAcademicYears();\n        this.showNotification(\"Academic year deleted successfully\");\n      }\n    }\n  }, {\n    key: \"showNotification\",\n    value: function showNotification(message) {\n      var notification = document.createElement(\"div\");\n      notification.className = \"notification success\";\n      notification.textContent = message;\n      document.body.appendChild(notification);\n      setTimeout(function () {\n        notification.classList.add(\"show\");\n      }, 100);\n      setTimeout(function () {\n        notification.classList.remove(\"show\");\n        setTimeout(function () {\n          return notification.remove();\n        }, 300);\n      }, 3000);\n    }\n  }]);\n}();\nvar academicYearsManager;\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  academicYearsManager = new AcademicYearsManager();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/components/AcademicYears.js\n\n}");

/***/ })

}]);